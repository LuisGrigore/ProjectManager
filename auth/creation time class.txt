class CreationTime:
    def __init__(self, second, minute, hour, day, month, year):
        if CreationTime._validate_params(second, minute, hour, day, month, year):
            self._second = second
            self._minute = minute
            self._hour = hour
            self._day = day
            self._month = month
            self._year = year
        else:
            raise Exception('Invalid Date')
    def add_minutes(self, minutes):
        self._minute += minutes

    @staticmethod
    def _validate_inclusive_range(low: int, high, val: int) -> bool:
        if high:
            return low <= val <= high
        return val >= low

    @staticmethod
    def _validate_day(day: int, month: int, year: int) -> bool:
        is_leap: bool = CreationTime._is_leap(year)
        has_thirty_days: bool = month == 4 or 6 or 9 or 11

        if month == 2:
            if (is_leap and day == 29) or (not is_leap and day == 28):
                return True
            return False
        elif has_thirty_days and day == 30:
            return True
        elif not has_thirty_days and day == 31:
            return True
        return False

    @staticmethod
    def _is_leap(year: int) -> bool:
        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            return True
        return False

    @staticmethod
    def _validate_params(second: int, minute: int, hour: int, day: int, month: int, year: int) -> bool:
        return (CreationTime._validate_inclusive_range(0, 60, second)
                and CreationTime._validate_inclusive_range(0, 60, minute)
                and CreationTime._validate_inclusive_range(0, 23, hour)
                and CreationTime._validate_inclusive_range(1, 12, month)
                and CreationTime._validate_inclusive_range(0, None, year)
                and CreationTime._validate_day(day, month, year))
